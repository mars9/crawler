// Code generated by protoc-gen-go.
// source: crawler.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	crawler.proto

It has these top-level messages:
	StartRequest
	StartResponse
	StopRequest
	StopResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type StartRequest struct {
	Hostname    string   `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	UserAgent   string   `protobuf:"bytes,2,opt,name=user_agent" json:"user_agent,omitempty"`
	RobotsAgent string   `protobuf:"bytes,3,opt,name=robots_agent" json:"robots_agent,omitempty"`
	Accept      []string `protobuf:"bytes,4,rep,name=accept" json:"accept,omitempty"`
	Reject      []string `protobuf:"bytes,5,rep,name=reject" json:"reject,omitempty"`
	MaxEnqueue  int64    `protobuf:"varint,6,opt,name=max_enqueue" json:"max_enqueue,omitempty"`
	Delay       int64    `protobuf:"varint,7,opt,name=delay" json:"delay,omitempty"`
	Sitemap     string   `protobuf:"bytes,10,opt,name=sitemap" json:"sitemap,omitempty"`
	Seeds       []string `protobuf:"bytes,11,rep,name=seeds" json:"seeds,omitempty"`
	TimeToLive  int64    `protobuf:"varint,12,opt,name=time_to_live" json:"time_to_live,omitempty"`
	Workers     int32    `protobuf:"varint,13,opt,name=workers" json:"workers,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto1.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StartResponse struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Workers   int32 `protobuf:"varint,2,opt,name=workers" json:"workers,omitempty"`
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto1.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StopRequest struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto1.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StopResponse struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto1.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto1.RegisterType((*StartRequest)(nil), "proto.StartRequest")
	proto1.RegisterType((*StartResponse)(nil), "proto.StartResponse")
	proto1.RegisterType((*StopRequest)(nil), "proto.StopRequest")
	proto1.RegisterType((*StopResponse)(nil), "proto.StopResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Crawler service

type CrawlerClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type crawlerClient struct {
	cc *grpc.ClientConn
}

func NewCrawlerClient(cc *grpc.ClientConn) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/proto.Crawler/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/proto.Crawler/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crawler service

type CrawlerServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
}

func RegisterCrawlerServer(s *grpc.Server, srv CrawlerServer) {
	s.RegisterService(&_Crawler_serviceDesc, srv)
}

func _Crawler_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlerServer).Start(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Crawler_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrawlerServer).Stop(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Crawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Crawler_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Crawler_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x52, 0xb3, 0x40,
	0x10, 0xc5, 0x2b, 0x7f, 0x80, 0x2f, 0x0d, 0x7c, 0xea, 0x90, 0xc5, 0x54, 0x36, 0x46, 0x56, 0xae,
	0x62, 0x55, 0x72, 0x04, 0x6f, 0x60, 0x0e, 0x40, 0x4d, 0x48, 0x97, 0xa2, 0xc0, 0x8c, 0x33, 0x8d,
	0xd1, 0x83, 0x7a, 0x1f, 0xa1, 0xc1, 0x94, 0x2c, 0xb2, 0x9a, 0xea, 0x5f, 0xcf, 0x7b, 0xdd, 0xfd,
	0x20, 0xce, 0xad, 0x3a, 0x95, 0x68, 0x37, 0xc6, 0x6a, 0xd2, 0xc2, 0xe3, 0x27, 0xfd, 0x9e, 0x40,
	0xb4, 0x27, 0x65, 0xe9, 0x09, 0xdf, 0x1b, 0x74, 0x24, 0xae, 0xe1, 0xdf, 0x8b, 0x76, 0x54, 0xab,
	0x0a, 0xe5, 0x64, 0x3d, 0xb9, 0x5f, 0x08, 0x01, 0xd0, 0x38, 0xb4, 0x99, 0x7a, 0xc6, 0x9a, 0xe4,
	0x94, 0xd9, 0x12, 0x22, 0xab, 0x0f, 0x9a, 0xdc, 0x40, 0x67, 0x4c, 0xff, 0x83, 0xaf, 0xf2, 0x1c,
	0x0d, 0xc9, 0xf9, 0x7a, 0xd6, 0xd7, 0x16, 0x5f, 0x31, 0x27, 0xe9, 0x71, 0x9d, 0x40, 0x58, 0xa9,
	0xcf, 0x0c, 0xeb, 0x76, 0x54, 0x83, 0xd2, 0x6f, 0x45, 0x33, 0x11, 0x83, 0x77, 0xc4, 0x52, 0x7d,
	0xc9, 0x80, 0xcb, 0x2b, 0x08, 0x5c, 0x41, 0x58, 0x29, 0x23, 0x81, 0x4d, 0xdb, 0xbe, 0x43, 0x3c,
	0x3a, 0x19, 0xb2, 0x47, 0x3b, 0x99, 0x8a, 0x0a, 0x33, 0xd2, 0x59, 0x59, 0x7c, 0xa0, 0x8c, 0x7e,
	0x55, 0x27, 0x6d, 0xdf, 0xd0, 0x3a, 0x19, 0xb7, 0xc0, 0x4b, 0x77, 0x10, 0x0f, 0x67, 0x39, 0xa3,
	0x6b, 0x87, 0xe2, 0x06, 0x16, 0x9d, 0xce, 0x91, 0xaa, 0x0c, 0x1f, 0x36, 0x12, 0x4d, 0x59, 0x74,
	0x0b, 0xe1, 0x9e, 0xb4, 0xb9, 0x18, 0x45, 0x7a, 0xd7, 0x85, 0xd5, 0x7d, 0xb8, 0x68, 0xba, 0xad,
	0x21, 0x78, 0xec, 0x83, 0x16, 0x5b, 0xf0, 0x78, 0x07, 0x91, 0xf4, 0x99, 0x6f, 0xfe, 0x06, 0xbd,
	0x5a, 0x8e, 0xe1, 0xe0, 0xf8, 0x00, 0xf3, 0x6e, 0x82, 0x10, 0xe7, 0xee, 0x79, 0x9f, 0x55, 0x32,
	0x62, 0xbd, 0xe0, 0xe0, 0x33, 0xdb, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x16, 0xbf, 0xb7,
	0xdf, 0x01, 0x00, 0x00,
}
